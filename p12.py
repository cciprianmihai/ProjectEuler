# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


from functools import reduce

# time module to calculate time
import time

# Time at the start of execution
stime = time.time()

# We are considering n = 28 Because we
# Already know that it has more than 5
# divisors. Also if we were to input
# n < 3 then you would get an error
# on line 40.
n = 28

# An infinite loop which is broken
# if we generate triangle number with
# 500 divisors
while True:
    # Sum of numbers from 1 to n
    triangle_number = n * (n + 1) / 2

    # Increasing the value of n
    # after using it
    n = n + 1

    # A dictionary to store the powers of primes
    dic = {}

    # Starting with a prime number 2
    i = 2

    # for loop to factor a number
    while i <= triangle_number:
        # If 'i' divides the number, then it is a
        # prime factor
        if triangle_number % i == 0:
            # Changing the value of number so that
            # we will not divide it with the same
            # number again and again
            triangle_number = triangle_number / i
            # We are storing the value in terms
            # of power of the prime number
            if i in dic:
                dic[i] += 1
            else:
                dic[i] = 1
            i -= 1
        i += 1

    # Increasing the value of powers by 1
    # to find the number of divisors
    powers = map(lambda x: (x + 1), dic.values())

    # Number of divisors
    divisors = reduce(lambda x, y: x * y, powers)

    # Condition to check if divisors > 500
    if divisors > 500:
        # Print the number
        print((n - 1) * (n) / 2)
        break

# Time at the end of program execution
etime = time.time()

# Printing the time of execution
print(etime - stime)